
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cr.ac.ucr.ci1322;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntacticAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Terminal.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\002\000\002\002\004\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\004\005\001\002\000\004\002\007\001" +
    "\002\000\004\004\006\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Integer globals     = 0;
    private Integer procedures  = 0;
    private Integer errors      = 0;
    private final long startMillis = System.currentTimeMillis();

    private void printParseFinish()
    {
        long durationMillis = System.currentTimeMillis() - startMillis;
        int lexerErrors = 0;
        java_cup.runtime.Scanner scanner = getScanner();
        if (scanner instanceof LexicalAnalyzer) {
            lexerErrors = ((LexicalAnalyzer)scanner).getErrors();
        }
        int totalErrors = lexerErrors + errors;
        if (totalErrors == 0) {
            System.out.println("Parse Completo, Buen Trabajo!");
        } else {
            System.out.println("Errores Encontrados");
        }
        System.out.println("====================================");
        System.out.println("Numero de Globales:       " + globals);
        System.out.println("Numero de Procedimientos: " + procedures);
        System.out.println("Numero de Errores:        " + totalErrors);
        if (totalErrors != 0) {
            System.out.println("Errores Lexicos:          " + lexerErrors);
            System.out.println("Errores Sintacticos:      " + errors);
        }
        System.out.format("Tiempo de Parsing:        %.3f s\n", durationMillis * 0.001);
        System.out.println("====================================");
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_symbol) throws java.lang.Exception
    {
        if (cur_token instanceof ComplexSymbol) {
            ComplexSymbol complexSymbol = (ComplexSymbol) cur_token;
            int line = complexSymbol.getLeft().getLine();
            int column = complexSymbol.getLeft().getColumn();
            System.out.println("No se pudo recuperar el error del simbolo \"" +
                ErrorReporter.getIdName(complexSymbol.sym) +
                "\" en linea " + line + ", columna " + column);
        } else {
            super.unrecovered_syntax_error(cur_token);
        }
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        if (cur_token instanceof ComplexSymbol) {
            ErrorReporter.syntaxError((ComplexSymbol) cur_token, expected_token_ids());
        } else {
            super.syntax_error(cur_token);
        }
    }

    private Symbol newSymbol(int terminal, Location left, Location right, Object val) {
        if (symbolFactory instanceof ComplexSymbolFactory) {
            ComplexSymbolFactory csf = (ComplexSymbolFactory) symbolFactory;
            return csf.newSymbol(Terminal.terminalNames[terminal], terminal, left, right, val);
        } else {
            return symbolFactory.newSymbol(Terminal.terminalNames[terminal], terminal, val);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntacticAnalyzer$actions {
  private final SyntacticAnalyzer parser;

  /** Constructor */
  CUP$SyntacticAnalyzer$actions(SyntacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action_part00000000(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= N_ROOT EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzer$parser.done_parsing();
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // N_ROOT ::= T_INTEGER T_INTEGER 
            {
              Object RESULT =null;
		Location intAxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).xleft;
		Location intAxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).xright;
		Integer intA = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		Location intBxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzer$stack.peek()).xleft;
		Location intBxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzer$stack.peek()).xright;
		Integer intB = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		
                                System.out.println(intA+intB);
                            
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("N_ROOT",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzer$do_action_part00000000(
                               CUP$SyntacticAnalyzer$act_num,
                               CUP$SyntacticAnalyzer$parser,
                               CUP$SyntacticAnalyzer$stack,
                               CUP$SyntacticAnalyzer$top);
    }
}

}
