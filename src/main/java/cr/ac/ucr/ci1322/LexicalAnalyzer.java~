/* The following code was generated by JFlex 1.6.1 */

// inicio user code

package cr.ac.ucr.ci1322;

import cr.ac.ucr.ci1322.exceptions.LexicalErrorException;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/b53779/Documents/LexicalAnalyzer/src/main/jflex/LexicalAnalyzer.jflex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\34\1\36\47\34\12\0\7\34\1\1\2\35\1\3\11\35\1\2"+
    "\1\4\2\35\1\5\1\35\1\6\6\35\4\34\1\35\1\34\1\7"+
    "\1\13\1\16\1\17\1\12\1\35\1\32\1\25\1\26\1\14\1\35"+
    "\1\30\1\27\1\10\1\15\1\24\1\35\1\22\1\20\1\11\1\21"+
    "\1\31\1\35\1\23\2\35\57\34\1\35\12\34\1\35\4\34\1\35"+
    "\5\34\27\35\1\34\37\35\1\34\2\35\1\33\u01c7\35\4\34\14\35"+
    "\16\34\5\35\7\34\1\35\1\34\1\35\21\34\165\35\1\34\2\35"+
    "\2\34\4\35\1\34\1\35\6\34\1\35\1\34\3\35\1\34\1\35"+
    "\1\34\24\35\1\34\123\35\1\34\213\35\1\34\255\35\1\34\46\35"+
    "\2\34\1\35\7\34\47\35\11\34\55\35\1\34\1\35\1\34\2\35"+
    "\1\34\2\35\1\34\1\35\10\34\33\35\5\34\3\35\35\34\13\35"+
    "\5\34\100\35\12\0\4\34\146\35\1\34\10\35\2\34\12\35\1\34"+
    "\6\35\12\0\3\35\2\34\1\35\20\34\73\35\2\34\145\35\16\34"+
    "\12\0\54\35\4\34\1\35\5\34\56\35\22\34\34\35\104\34\23\35"+
    "\61\34\200\35\2\34\12\0\1\34\23\35\1\34\10\35\2\34\2\35"+
    "\2\34\26\35\1\34\7\35\1\34\1\35\3\34\4\35\2\34\11\35"+
    "\2\34\2\35\2\34\4\35\10\34\1\35\4\34\2\35\1\34\5\35"+
    "\2\34\12\0\2\35\17\34\3\35\1\34\6\35\4\34\2\35\2\34"+
    "\26\35\1\34\7\35\1\34\2\35\1\34\2\35\1\34\2\35\2\34"+
    "\1\35\1\34\5\35\4\34\2\35\2\34\3\35\3\34\1\35\7\34"+
    "\4\35\1\34\1\35\7\34\12\0\6\35\13\34\3\35\1\34\11\35"+
    "\1\34\3\35\1\34\26\35\1\34\7\35\1\34\2\35\1\34\5\35"+
    "\2\34\12\35\1\34\3\35\1\34\3\35\2\34\1\35\17\34\4\35"+
    "\2\34\12\0\21\34\3\35\1\34\10\35\2\34\2\35\2\34\26\35"+
    "\1\34\7\35\1\34\2\35\1\34\5\35\2\34\11\35\2\34\2\35"+
    "\2\34\3\35\10\34\2\35\4\34\2\35\1\34\5\35\2\34\12\0"+
    "\1\34\1\35\20\34\2\35\1\34\6\35\3\34\3\35\1\34\4\35"+
    "\3\34\2\35\1\34\1\35\1\34\2\35\3\34\2\35\3\34\3\35"+
    "\3\34\14\35\4\34\5\35\3\34\3\35\1\34\4\35\2\34\1\35"+
    "\6\34\1\35\16\34\12\0\20\34\4\35\1\34\10\35\1\34\3\35"+
    "\1\34\27\35\1\34\20\35\3\34\10\35\1\34\3\35\1\34\4\35"+
    "\7\34\2\35\1\34\2\35\6\34\4\35\2\34\12\0\21\34\3\35"+
    "\1\34\10\35\1\34\3\35\1\34\27\35\1\34\12\35\1\34\5\35"+
    "\2\34\11\35\1\34\3\35\1\34\4\35\7\34\2\35\7\34\1\35"+
    "\1\34\4\35\2\34\12\0\1\34\2\35\16\34\3\35\1\34\10\35"+
    "\1\34\3\35\1\34\51\35\2\34\10\35\1\34\3\35\1\34\5\35"+
    "\10\34\1\35\10\34\4\35\2\34\12\0\12\34\6\35\2\34\2\35"+
    "\1\34\22\35\3\34\30\35\1\34\11\35\1\34\1\35\2\34\7\35"+
    "\3\34\1\35\4\34\6\35\1\34\1\35\1\34\10\35\6\34\12\0"+
    "\2\34\2\35\15\34\72\35\5\34\17\35\1\34\12\0\47\34\2\35"+
    "\1\34\1\35\2\34\2\35\1\34\1\35\2\34\1\35\6\34\4\35"+
    "\1\34\7\35\1\34\3\35\1\34\1\35\1\34\1\35\2\34\2\35"+
    "\1\34\15\35\1\34\3\35\2\34\5\35\1\34\1\35\1\34\6\35"+
    "\2\34\12\0\2\34\4\35\40\34\1\35\27\34\2\35\6\34\12\0"+
    "\13\34\1\35\1\34\1\35\1\34\1\35\4\34\12\35\1\34\44\35"+
    "\4\34\24\35\1\34\22\35\1\34\44\35\11\34\1\35\71\34\100\35"+
    "\12\0\6\34\100\35\12\0\4\35\2\34\46\35\1\34\1\35\5\34"+
    "\1\35\2\34\53\35\1\34\u014d\35\1\34\4\35\2\34\7\35\1\34"+
    "\1\35\1\34\4\35\2\34\51\35\1\34\4\35\2\34\41\35\1\34"+
    "\4\35\2\34\7\35\1\34\1\35\1\34\4\35\2\34\17\35\1\34"+
    "\71\35\1\34\4\35\2\34\103\35\2\34\3\35\40\34\20\35\20\34"+
    "\125\35\14\34\u026c\35\2\34\21\35\1\34\32\35\5\34\113\35\3\34"+
    "\13\35\7\34\15\35\1\34\7\35\13\34\25\35\13\34\24\35\14\34"+
    "\15\35\1\34\3\35\1\34\2\35\14\34\124\35\3\34\1\35\4\34"+
    "\2\35\2\34\12\0\41\34\3\35\2\34\12\0\6\34\130\35\10\34"+
    "\53\35\5\34\106\35\12\34\37\35\1\34\14\35\4\34\14\35\12\34"+
    "\12\0\36\35\2\34\5\35\13\34\54\35\4\34\32\35\6\34\12\0"+
    "\46\34\34\35\4\34\77\35\1\34\35\35\2\34\1\35\12\0\6\34"+
    "\12\0\15\34\1\35\10\34\17\35\101\34\114\35\4\34\12\0\21\34"+
    "\11\35\14\34\60\35\12\0\72\35\14\34\70\35\10\34\12\0\3\34"+
    "\3\35\12\0\44\35\122\34\3\35\1\34\43\35\1\34\2\35\6\34"+
    "\366\35\6\34\u011a\35\2\34\6\35\2\34\46\35\2\34\6\35\2\34"+
    "\10\35\1\34\1\35\1\34\1\35\1\34\1\35\1\34\37\35\2\34"+
    "\65\35\1\34\7\35\1\34\1\35\3\34\3\35\1\34\7\35\3\34"+
    "\4\35\2\34\6\35\4\34\15\35\5\34\3\35\1\34\7\35\102\34"+
    "\2\35\23\34\1\35\34\34\1\35\15\34\1\35\20\34\15\35\63\34"+
    "\41\35\21\34\1\35\4\34\1\35\2\34\12\35\1\34\1\35\3\34"+
    "\5\35\6\34\1\35\1\34\1\35\1\34\1\35\1\34\4\35\1\34"+
    "\13\35\2\34\4\35\5\34\5\35\4\34\1\35\21\34\51\35\u032d\34"+
    "\64\35\u0716\34\57\35\1\34\57\35\1\34\205\35\6\34\11\35\14\34"+
    "\46\35\1\34\1\35\5\34\1\35\2\34\70\35\7\34\1\35\17\34"+
    "\30\35\11\34\7\35\1\34\7\35\1\34\7\35\1\34\7\35\1\34"+
    "\7\35\1\34\7\35\1\34\7\35\1\34\7\35\1\34\40\35\57\34"+
    "\1\35\u01d5\34\3\35\31\34\17\35\1\34\5\35\2\34\5\35\4\34"+
    "\126\35\2\34\2\35\2\34\3\35\1\34\132\35\1\34\4\35\5\34"+
    "\51\35\3\34\136\35\21\34\33\35\65\34\20\35\u0200\34\u19b6\35\112\34"+
    "\u51cd\35\63\34\u048d\35\103\34\56\35\2\34\u010d\35\3\34\20\35\12\0"+
    "\2\35\24\34\63\35\1\34\12\35\1\34\37\35\1\34\123\35\45\34"+
    "\11\35\2\34\147\35\2\34\4\35\1\34\36\35\2\34\2\35\105\34"+
    "\61\35\30\34\64\35\14\34\105\35\13\34\12\0\6\34\30\35\3\34"+
    "\1\35\4\34\12\0\44\35\2\34\44\35\14\34\35\35\3\34\101\35"+
    "\16\34\1\35\12\0\6\34\20\35\12\0\5\35\1\34\67\35\11\34"+
    "\16\35\2\34\12\0\6\34\27\35\3\34\111\35\30\34\3\35\2\34"+
    "\20\35\2\34\5\35\12\34\6\35\2\34\6\35\2\34\6\35\11\34"+
    "\7\35\1\34\7\35\1\34\53\35\1\34\4\35\4\34\2\35\132\34"+
    "\53\35\1\34\2\35\2\34\12\0\6\34\u2ba4\35\14\34\27\35\4\34"+
    "\61\35\u2104\34\u016e\35\2\34\152\35\46\34\7\35\14\34\5\35\5\34"+
    "\14\35\1\34\15\35\1\34\5\35\1\34\1\35\1\34\2\35\1\34"+
    "\2\35\1\34\154\35\41\34\u016b\35\22\34\100\35\2\34\66\35\50\34"+
    "\14\35\4\34\20\35\20\34\16\35\5\34\2\35\30\34\3\35\40\34"+
    "\5\35\1\34\207\35\23\34\12\0\7\34\32\35\4\34\1\35\1\34"+
    "\32\35\13\34\131\35\3\34\6\35\2\34\6\35\2\34\6\35\2\34"+
    "\3\35\43\34\14\35\1\34\32\35\1\34\23\35\1\34\2\35\1\34"+
    "\17\35\2\34\16\35\42\34\173\35\105\34\65\35\210\34\1\35\202\34"+
    "\35\35\3\34\61\35\17\34\1\35\37\34\40\35\20\34\33\35\5\34"+
    "\53\35\5\34\36\35\2\34\44\35\4\34\10\35\1\34\5\35\52\34"+
    "\236\35\2\34\12\0\126\34\50\35\10\34\64\35\234\34\u0137\35\11\34"+
    "\26\35\12\34\10\35\230\34\6\35\2\34\1\35\1\34\54\35\1\34"+
    "\2\35\3\34\1\35\2\34\27\35\12\34\27\35\11\34\37\35\141\34"+
    "\26\35\12\34\32\35\106\34\70\35\6\34\2\35\100\34\4\35\1\34"+
    "\2\35\5\34\10\35\1\34\3\35\1\34\33\35\4\34\3\35\4\34"+
    "\1\35\40\34\35\35\3\34\35\35\43\34\10\35\1\34\36\35\31\34"+
    "\66\35\12\34\26\35\12\34\23\35\15\34\22\35\156\34\111\35\u03b7\34"+
    "\107\35\37\34\12\0\17\34\74\35\25\34\31\35\7\34\12\0\6\34"+
    "\65\35\1\34\12\0\20\34\44\35\2\34\1\35\11\34\105\35\13\34"+
    "\12\0\1\35\45\34\22\35\1\34\45\35\170\34\73\35\5\34\12\0"+
    "\7\34\3\35\1\34\10\35\2\34\2\35\2\34\26\35\1\34\7\35"+
    "\1\34\2\35\1\34\5\35\2\34\11\35\2\34\2\35\2\34\3\35"+
    "\11\34\1\35\5\34\7\35\2\34\7\35\3\34\5\35\u010b\34\106\35"+
    "\1\34\1\35\10\34\12\0\246\34\66\35\2\34\11\35\77\34\101\35"+
    "\3\34\1\35\13\34\12\0\46\34\70\35\10\34\12\0\u01d6\34\100\35"+
    "\12\0\25\34\1\35\u01c0\34\71\35\u0507\34\u0399\35\147\34\157\35\u0b91\34"+
    "\u042f\35\u33d1\34\u0239\35\7\34\37\35\1\34\12\0\146\34\36\35\2\34"+
    "\5\35\13\34\67\35\11\34\4\35\14\34\12\0\11\34\25\35\5\34"+
    "\23\35\u0370\34\105\35\13\34\57\35\20\34\21\35\u4060\34\2\35\u0bfe\34"+
    "\153\35\5\34\15\35\3\34\11\35\7\34\12\35\3\34\2\35\u14c6\34"+
    "\5\35\3\34\6\35\10\34\10\35\2\34\7\35\36\34\4\35\224\34"+
    "\3\35\u01bb\34\125\35\1\34\107\35\1\34\2\35\2\34\1\35\2\34"+
    "\2\35\2\34\4\35\1\34\14\35\1\34\1\35\1\34\7\35\1\34"+
    "\101\35\1\34\4\35\2\34\10\35\1\34\7\35\1\34\34\35\1\34"+
    "\4\35\1\34\5\35\1\34\1\35\3\34\7\35\1\34\u0154\35\2\34"+
    "\31\35\1\34\31\35\1\34\37\35\1\34\31\35\1\34\37\35\1\34"+
    "\31\35\1\34\37\35\1\34\31\35\1\34\37\35\1\34\31\35\1\34"+
    "\10\35\2\34\62\0\u1000\34\305\35\13\34\7\35\u0529\34\4\35\1\34"+
    "\33\35\1\34\2\35\1\34\1\35\2\34\1\35\1\34\12\35\1\34"+
    "\4\35\1\34\1\35\1\34\1\35\6\34\1\35\4\34\1\35\1\34"+
    "\1\35\1\34\1\35\1\34\3\35\1\34\2\35\1\34\1\35\2\34"+
    "\1\35\1\34\1\35\1\34\1\35\1\34\1\35\1\34\1\35\1\34"+
    "\2\35\1\34\1\35\2\34\4\35\1\34\7\35\1\34\4\35\1\34"+
    "\4\35\1\34\1\35\1\34\12\35\1\34\21\35\5\34\3\35\1\34"+
    "\5\35\1\34\21\35\u0274\34\32\35\6\34\32\35\6\34\32\35\u0e76\34"+
    "\ua6d7\35\51\34\u1035\35\13\34\336\35\u3fe2\34\u021e\35\uffff\34\uffff\34\uffff\34\uffff\34\uffff\34\uffff\34\uffff\34\uffff\34\uffff\34\uffff\34\uffff\34\u06ed\34"+
    "\360\35\uffff\34\uffff\34\ufe12\34";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\5\1\1\2\13\1\3\0\1\3\2\0\1\2"+
    "\1\0\1\4\2\0\1\2\4\0\1\4\4\0\1\4"+
    "\1\0\1\5\1\6\5\0\1\2\4\0\1\4\4\0"+
    "\1\4\1\0\1\2\5\0\1\4\3\0\1\7\1\2"+
    "\10\0\1\2\2\0\1\2\27\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1"+
    "\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u022e\0\u028b\0\u02aa"+
    "\0\u02c9\0\u02e8\0\u022e\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383"+
    "\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b"+
    "\0\u049a\0\u049a\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535"+
    "\0\u049a\0\u0554\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e"+
    "\0\u062d\0\u064c\0\u049a\0\u066b\0\u066b\0\u068a\0\u06a9\0\u06c8"+
    "\0\u06e7\0\u0706\0\u066b\0\u0725\0\u0744\0\u0763\0\37\0\u0763"+
    "\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b"+
    "\0\u085b\0\u087a\0\u0899\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915"+
    "\0\u0934\0\u0953\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d"+
    "\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05"+
    "\0\u0b24\0\u0b43\0\u0b62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\5\1\7\1\5"+
    "\1\10\1\11\1\12\2\5\1\13\1\14\1\15\1\16"+
    "\2\5\1\17\1\20\1\5\1\21\1\22\6\5\37\0"+
    "\2\23\1\24\31\23\1\0\1\23\1\0\4\23\1\25"+
    "\27\23\1\0\1\23\1\0\34\23\1\0\1\23\1\0"+
    "\5\23\1\26\26\23\1\0\1\23\1\0\10\23\1\27"+
    "\23\23\1\0\1\23\1\0\22\23\1\30\11\23\1\0"+
    "\1\23\1\0\10\23\1\31\12\23\1\32\4\23\1\33"+
    "\3\23\1\0\1\23\1\0\7\23\1\34\24\23\1\0"+
    "\1\23\1\0\15\23\1\35\16\23\1\0\1\23\1\0"+
    "\12\23\1\36\6\23\1\37\12\23\1\0\1\23\1\0"+
    "\7\23\1\40\2\23\1\41\2\23\1\42\10\23\1\35"+
    "\5\23\1\0\1\23\1\0\10\23\1\43\23\23\1\0"+
    "\1\23\1\0\7\23\1\44\5\23\1\45\16\23\1\0"+
    "\1\23\1\0\7\23\1\46\24\23\1\0\1\23\1\0"+
    "\12\23\1\47\21\23\1\0\1\23\1\0\7\23\1\50"+
    "\5\23\1\50\16\23\1\0\1\23\1\0\34\51\1\0"+
    "\1\51\1\0\3\51\1\52\30\51\1\0\1\51\1\0"+
    "\6\51\1\53\25\51\1\0\1\51\1\0\11\51\1\54"+
    "\22\51\1\0\1\51\1\0\7\51\1\55\24\51\1\0"+
    "\1\51\1\0\11\51\1\56\22\51\1\0\1\51\1\0"+
    "\16\51\1\57\15\51\1\0\1\51\1\0\14\51\1\60"+
    "\17\51\1\0\1\51\1\0\10\51\1\61\23\51\1\0"+
    "\1\51\1\0\20\51\1\62\13\51\1\0\1\51\1\0"+
    "\22\51\1\63\11\51\1\0\1\51\1\0\30\51\1\64"+
    "\3\51\1\0\1\51\1\0\32\51\1\65\1\51\1\0"+
    "\1\51\1\0\13\51\1\56\20\51\1\0\1\51\1\0"+
    "\7\51\1\66\5\51\1\66\16\51\1\0\1\51\1\0"+
    "\22\51\1\67\11\51\1\0\1\51\1\0\22\51\1\61"+
    "\11\51\1\0\1\51\1\0\16\51\1\70\1\51\1\71"+
    "\13\51\1\0\1\51\1\0\17\51\1\72\14\51\1\0"+
    "\1\51\1\0\20\51\1\73\13\51\1\0\1\51\1\0"+
    "\34\74\1\0\1\74\1\0\12\74\1\75\21\74\1\0"+
    "\1\74\1\0\20\74\1\75\13\74\1\0\1\74\1\0"+
    "\22\74\1\76\11\74\1\0\1\74\1\0\12\74\1\77"+
    "\21\74\1\0\1\74\1\0\15\74\1\75\16\74\1\0"+
    "\1\74\1\0\17\74\1\76\14\74\1\0\1\74\1\0"+
    "\7\74\1\100\24\74\1\0\1\74\1\0\31\74\1\101"+
    "\2\74\1\0\1\74\1\0\33\74\1\102\1\0\1\74"+
    "\1\0\20\74\1\103\13\74\1\0\1\74\1\0\7\74"+
    "\1\75\24\74\1\0\1\74\1\0\26\74\1\104\5\74"+
    "\1\0\1\74\1\0\11\74\1\104\22\74\1\0\1\74"+
    "\1\0\26\74\1\105\5\74\1\0\1\74\1\0\34\106"+
    "\1\0\1\106\1\107\12\106\1\110\21\106\1\0\1\106"+
    "\1\107\24\106\1\111\7\106\1\0\1\106\1\107\10\106"+
    "\1\112\23\106\1\0\1\106\1\107\15\106\1\110\16\106"+
    "\1\0\1\106\1\107\10\106\1\110\23\106\1\0\1\106"+
    "\1\107\7\106\1\110\24\106\1\0\1\106\1\107\7\106"+
    "\1\113\24\106\1\0\1\106\1\107\34\114\1\0\1\114"+
    "\1\107\11\114\1\115\22\114\1\0\1\114\1\107\11\114"+
    "\1\116\22\114\1\0\1\114\1\107\10\114\1\117\23\114"+
    "\1\0\1\114\1\107\34\120\1\0\1\120\1\107\15\120"+
    "\1\121\16\120\1\0\1\120\1\107\12\120\1\121\21\120"+
    "\1\0\1\120\1\107\11\120\1\122\22\120\1\0\1\120"+
    "\1\107\34\123\1\0\1\123\1\107\12\123\1\124\21\123"+
    "\1\0\1\123\1\107\34\125\1\0\1\125\1\107\34\126"+
    "\1\0\1\126\1\107\34\127\1\0\1\127\1\107\34\130"+
    "\1\0\1\130\1\107\34\131\1\0\1\131\1\107\34\132"+
    "\1\0\1\132\1\107\34\133\1\0\1\133\1\107\34\134"+
    "\1\0\1\134\1\107\34\135\1\0\1\135\1\107\34\136"+
    "\1\0\1\136\1\107\34\137\1\0\1\137\1\107\34\140"+
    "\1\0\1\140\1\107\34\141\1\0\1\141\1\107\34\142"+
    "\1\0\1\142\1\107\34\143\1\0\1\143\1\107\34\144"+
    "\1\0\1\144\1\107\34\145\1\0\1\145\1\107\34\146"+
    "\1\0\1\146\1\107\34\147\1\0\1\147\1\107\34\150"+
    "\1\0\1\150\1\107\34\151\1\0\1\151\1\107\34\152"+
    "\1\0\1\152\1\107\34\153\1\0\1\153\1\107\36\0"+
    "\1\107";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2945];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\3\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\1\1\4\0\1\1\4\0\1\1\1\0"+
    "\2\1\5\0\1\1\4\0\1\1\4\0\1\1\1\0"+
    "\1\1\5\0\1\1\3\0\1\11\1\1\10\0\1\1"+
    "\2\0\1\1\27\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2666) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {  }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Lexical error: unknown token "+yytext());ok=false;
            }
          case 8: break;
          case 2: 
            { System.out.print(yytext()+" es una preposicion");
            }
          case 9: break;
          case 3: 
            { System.out.print(yytext()+" es un operador OR");
            }
          case 10: break;
          case 4: 
            { System.out.print(yytext()+" es un articulo");
            }
          case 11: break;
          case 5: 
            { System.out.print(yytext()+" es un operador AND");
            }
          case 12: break;
          case 6: 
            { System.out.print(yytext()+" es un operador NOT");
            }
          case 13: break;
          case 7: 
            { System.out.print(yytext()+" es un termino");
            }
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexicalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexicalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
